/*
 * Raft Consensus Module
 * 
 * Implements consensus algorithm to get commitment for logged commands
 * 
 * Author: Eric Dortmans (e.dortmans@fontys.nl)
 */

import Types.dzn;
import ServerInterface.dzn;
import Timer.dzn;
import Rules.dzn;
import Config.dzn;
import Rpc.dzn;

component ConsensusModule
{
	provides IServer ctrl;
	requires ITimer electionTimer;
	requires ITimer heartbeatTimer;
	requires IRules rules;
	requires IConfig config;
	requires IRpcClient rpcclient;
  	requires IRpcServer rpcserver;

	behaviour
	{		
		string myId;
		xint electionTime;
		xint heartbeatTime;
		
		enum State {OFFLINE, ONLINE};
		enum RaftState {FOLLOWER, CANDIDATE, LEADER, UNDEFINED};
		RaftState raftState = RaftState.UNDEFINED;
		State state = State.OFFLINE;

		void initPeers()
    	{
      		string peerId;
      		number peers = config.numPeers();
      		bool more = config.nextPeer(peerId);
      		if (more) {
      			rules.addPeer(peerId);
        		initPeers(); // tail recursion      	
      		}
    	}

    	void sendRequestVoteMessages()
    	/*
    	 * Send RequestVote messages to all peer servers
    	 */
    	{
    		string peerId;
    		string candidateId;
    		xint term;
    		xint lastLogIndex;
    		xint lastLogTerm;
      		bool more = rules.nextRequestVote(peerId, candidateId, term, lastLogIndex, lastLogTerm);
      		if (more) {
      			rpcclient.RequestVote(peerId, candidateId, term, lastLogIndex, lastLogTerm);
        		sendRequestVoteMessages(); // tail recursion      	
      		}
    	}
    	
    	void sendAppendEntriesMessages()
    	/*
    	 * Send AppendEntries messages to all peer servers
    	 */
    	{
    		string peerId;
    		string leaderId;
    		xint term;
    		xint prevLogIndex;
    		xint prevLogTerm;
    		string entries;
    		xint leaderCommit;
      		bool more = rules.nextAppendEntries(peerId, leaderId, term, prevLogIndex, prevLogTerm, entries, leaderCommit);
      		if (more) {
      			rpcclient.AppendEntries(peerId, leaderId, term, prevLogIndex, prevLogTerm, entries, leaderCommit);
        		sendAppendEntriesMessages(); // tail recursion      	
      		}
    	}

		[state.OFFLINE]{
			/*
			 * The server is offline and does not respond to any  messages, except OnLine().
			 */
			on ctrl.OnLine(): {
				config.myId(myId);
				rules.init(myId);
				initPeers();
				state = State.ONLINE;
				raftState = RaftState.FOLLOWER;
				rules.getElectionTime(electionTime);
				electionTimer.start(electionTime);
			}
			on ctrl.OffLine(): {}
			on rpcserver.ClientRequest(clientId, command): {}
			on rpcserver.RequestVote(candidateId, term, lastLogIndex, lastLogTerm): {}
			on rpcserver.AppendEntries(leaderId, term, prevLogIndex, prevLogTerm, entries, leaderCommit): {}
			on rpcclient.AppendEntriesRefused(peerId, term): {}
			on rpcclient.AppendEntriesSuccess(peerId, term): {}
			on rpcclient.RequestVoteDenied(peerId, term): {}
			on rpcclient.RequestVoteGranted(peerId, term): {}
			on rules.AppendEntriesRefused(leaderId, currentTerm): {}
			on rules.AppendEntriesSucces(leaderId, currentTerm): {}
			on rules.leadershipLost(): {}
			on rules.leadershipWon(): {}
			on rules.RequestVoteDenied(candidateId, currentTerm): {}
			on rules.RequestVoteGranted(candidateId, currentTerm): {}
			on rules.ClientRequestSuccess(clientId, result): {}
			on rules.ClientRequestFailed(clientId, leaderId): {}
			on electionTimer.timeout(): {}
			on heartbeatTimer.timeout(): {}
		}
		[state.ONLINE]{
			/*
			 * The server is online and behaving according the Raft protocol
			 */
			on ctrl.OnLine(): {}
			on ctrl.OffLine(): {
				electionTimer.cancel();
				heartbeatTimer.cancel();
				state = State.OFFLINE;
				raftState = RaftState.UNDEFINED;
			}

			on rules.AppendEntriesSucces(leaderId, currentTerm): {// Entries successfully logged
				rpcserver.AppendEntriesSuccess(leaderId, currentTerm);
			}
			on rules.AppendEntriesRefused(leaderId, currentTerm): {// Refused to append entries to log
				rpcserver.AppendEntriesRefused(leaderId, currentTerm);
			}
			on rules.RequestVoteGranted(candidateId, currentTerm): {// Vote granted
				rpcserver.RequestVoteGranted(candidateId, currentTerm);
			}
			on rules.RequestVoteDenied(candidateId, currentTerm): {// Vote denied
				rpcserver.RequestVoteDenied(candidateId, currentTerm);
			}
			on rules.ClientRequestSuccess(clientId, result): {// Command successfully executed
				rpcserver.ClientRequestSuccess(clientId, result);
			}				
			on rules.ClientRequestFailed(clientId, leaderId): {// Request could not be handled. Wrong server.
				rpcserver.ClientRequestFailed(clientId, leaderId);
			}

			[raftState.FOLLOWER]{
				/*
				 * Passive behavior. Follow the Leader. Only respond to AppendEntries from Leader or RequestVote from Candidate.
				 */			
				on electionTimer.timeout(): {// Start the election process because there seems not to be a Leader yet
					raftState = RaftState.CANDIDATE;
					rules.getElectionTime(electionTime); 
					electionTimer.start(electionTime);
					rules.startElection();
					sendRequestVoteMessages();
				}
				on rpcclient.AppendEntriesRefused(peerId, term): {}
				on rpcclient.AppendEntriesSuccess(peerId, term): {}
				on rpcclient.RequestVoteDenied(peerId, term): {}
				on rpcclient.RequestVoteGranted(peerId, term): {}
				on rpcserver.ClientRequest(clientId, command): {// Handle ClientRequest
					rules.handleClientRequest(clientId, command);
				}
				on rpcserver.RequestVote(candidateId, term, lastLogIndex, lastLogTerm): {// Handle RequestVote
					electionTimer.cancel();
					rules.getElectionTime(electionTime); 
					electionTimer.start(electionTime);
					rules.handleRequestVote(candidateId, term, lastLogIndex, lastLogTerm);
				}
				on rpcserver.AppendEntries(leaderId, term, prevLogIndex, prevLogTerm, entries, leaderCommit): {// Handle AppendEntries
					electionTimer.cancel();
					rules.getElectionTime(electionTime); 
					electionTimer.start(electionTime);
					rules.handleAppendEntries(leaderId, term, prevLogIndex, prevLogTerm, entries, leaderCommit);
				}
				on rules.leadershipLost(): {}
				on rules.leadershipWon(): {}
				on heartbeatTimer.timeout(): {}
			}
			[raftState.CANDIDATE]{
				/*
				 * Actively trying to get elected as Leader
				 */
				on electionTimer.timeout(): {// Restart the election process. Neither me nor one of my peers has been elected.
					rules.getElectionTime(electionTime); 
					electionTimer.start(electionTime);
					rules.startElection();
					sendRequestVoteMessages();
				}
				on rpcclient.AppendEntriesRefused(peerId, term): {}
				on rpcclient.AppendEntriesSuccess(peerId, term): {}
				on rpcclient.RequestVoteDenied(peerId, term): {
					rules.handleRequestVoteDenied(peerId, term);
				}
				on rpcclient.RequestVoteGranted(peerId, term): {
					rules.handleRequestVoteGranted(peerId, term);
				}
				on rules.leadershipWon(): {// Did we become the Leader
					raftState = RaftState.LEADER;
					electionTimer.cancel();	
					rules.getHeartbeatTime(heartbeatTime);
					heartbeatTimer.start(heartbeatTime);
					rules.startReplication();
					sendAppendEntriesMessages();
				}
				on rpcserver.ClientRequest(clientId, command): {
					rules.handleClientRequest(clientId, command); // probably refuse
				}
				on rpcserver.RequestVote(candidateId, term, lastLogIndex, lastLogTerm): {
					rules.handleRequestVote(candidateId, term, lastLogIndex, lastLogTerm); // Is its term newer then mine?
				}
				on rpcserver.AppendEntries(leaderId, term, prevLogIndex, prevLogTerm, entries, leaderCommit): {
					rules.handleAppendEntries(leaderId, term, prevLogIndex, prevLogTerm, entries, leaderCommit); // Is its term newer then mine?
				}
				on rules.leadershipLost(): {// One of my peers became Leader
					raftState = RaftState.FOLLOWER;
					electionTimer.cancel();
					rules.getElectionTime(electionTime); 
					electionTimer.start(electionTime);
				}
				on heartbeatTimer.timeout(): {}
			}
			[raftState.LEADER]{
				/*
				 * Be a good leader...
				 * - Respond to requests from Clients
				 * - Send AppendEntries to Followers in order to replicate log entries and as heartbeat to maintain leadership
				 */
				on heartbeatTimer.timeout():{
					rules.getHeartbeatTime(heartbeatTime);
					heartbeatTimer.start(heartbeatTime);
					rules.startReplication();
					sendAppendEntriesMessages();				
				}
				on rpcclient.AppendEntriesRefused(peerId, term): {
					rules.handleAppendEntriesRefused(peerId, term);
				}
				on rpcclient.AppendEntriesSuccess(peerId, term): {
					rules.handleAppendEntriesSuccess(peerId, term);
				}
				on rpcclient.RequestVoteDenied(peerId, term): {}
				on rpcclient.RequestVoteGranted(peerId, term): {}			
				on rules.leadershipWon(): {}
				on rpcserver.ClientRequest(clientId, command): {
					rules.handleClientRequest(clientId, command);
				}
				on rpcserver.RequestVote(candidateId, term, lastLogIndex, lastLogTerm): {
					rules.handleRequestVote(candidateId, term, lastLogIndex, lastLogTerm); // Is its term newer then mine?
				}
				on rpcserver.AppendEntries(leaderId, term, prevLogIndex, prevLogTerm, entries, leaderCommit): {
					rules.handleAppendEntries(leaderId, term, prevLogIndex, prevLogTerm, entries, leaderCommit); // Is its term newer then mine?
				}
				on rules.leadershipLost(): {// A peer with a newer term is the real Leader
					heartbeatTimer.cancel();
					raftState = RaftState.FOLLOWER;
					rules.getElectionTime(electionTime); 
					electionTimer.start(electionTime);
				}
				on electionTimer.timeout(): {}
			}

		}
	}

}