/*
 * Raft Consensus Module
 * 
 * Implements consensus algorithm to get commitment for logged commands
 * 
 * author: Eric Dortmans (e.dortmans@fontys.nl)
 */

import Types.dzn;
import StateMachine.dzn;
import Log.dzn;
import RPC.dzn;


interface IServer
{
	in void clientRequest(string command);
	out void clientRequestSuccess();
	out void clientRequestFailed(in string leaderId);
	in void getLeaderId(out string leaderId);

	behaviour
	{
		// on clientRequest: { clientRequestSuccess; } 
		// on clientRequest: { clientRequestFailed; } 
		on clientRequest: { }
		on optional: { clientRequestSuccess; }
		on optional: { clientRequestFailed; }
		on getLeaderId: { }
	}
}

component ConsensusModule
{
	
	provides IServer ctrl;
	requires IStateMachine statemachine;
	requires ILog log;
	requires IServerClientRPC rpcclient;
	//requires IServerServerRPC rpcserver;

	behaviour
	{
		string leaderId = $"0.0.0.0"$;
		int currentTerm = $0$;
		number servers = 3;
		number majority = 2;
		number votes = 1;
		
		enum State {Follower, Candidate, Leader};
		State state = State.Candidate;
		
		on ctrl.getLeaderId(leaderId): {}
		[state.Follower]{
			on ctrl.clientRequest(command): {
				ctrl.clientRequestFailed(leaderId); // only respond to requests from other servers
			}
			on rpcclient.RequestVoteGranted(currentTerm): {}
			on rpcclient.RequestVoteRefused(currentTerm): {}
			on rpcclient.AppendEntriesSuccess(currentTerm): {}
			on rpcclient.AppendEntriesFailed(currentTerm): {}
		}
		[state.Candidate]{
			on ctrl.clientRequest(command): {
				ctrl.clientRequestFailed(leaderId); // only respond to requests from other servers
			}
			on rpcclient.RequestVoteGranted(currentTerm): {
				votes = votes + 1;
				if (votes >= majority) {
					state = State.Leader;
				}
			}
			on rpcclient.RequestVoteRefused(currentTerm): {}
			on rpcclient.AppendEntriesSuccess(currentTerm): {}
			on rpcclient.AppendEntriesFailed(currentTerm): {}
		}
		[state.Leader]{
			on ctrl.clientRequest(command): {
				/* 
				 * Log the command and try to replicate and commit it
				 */			
			}
			on rpcclient.RequestVoteGranted(currentTerm): {}
			on rpcclient.RequestVoteRefused(currentTerm): {}
			on rpcclient.AppendEntriesSuccess(currentTerm): {
				ctrl.clientRequestSuccess(); // command replicated and committed
			}
			on rpcclient.AppendEntriesFailed(currentTerm): {
			
			}

		}
	}
}

